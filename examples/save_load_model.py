"""
Create a MIDI file with a melody generated by a Maximum Entropy model trained on a Bach
violin partita.

This example can be used to train a model on a MIDI file and save it to a file or to load a
previously trained model from a file.

It will then generate a MIDI file with a melody of 200 notes.

Usage: save_load_model.py [-h] [-l] [-o OUTPUT_MODEL] [-i INPUT_MODEL] [-k K_MAX] midi_file_name

Train or load a model.

positional arguments:
  midi_file_name        the path of the training MIDI file

options:
  -h, --help            show this help message and exit
  -l, --load            load the model
  -o, --output-model OUTPUT_MODEL
                        file where the model is saved
  -i, --input-model INPUT_MODEL
                        file where the model is loaded from
  -k, --k-max K_MAX     the maximum context length (k_max)
  -n, --note-count NOTE_COUNT
                        the length of the generated MIDI sequence


"""

import logging
from pathlib import Path

from mem.midi.midi import (
    extract_pitches_from_midi,
    save_midi,
)
from mem.training.generator import SequenceGenerator

logging.basicConfig(level=logging.INFO)

import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Train or load a model.")
    parser.add_argument(
        "midi_file_name",
        help="the path of the training MIDI file",
    )
    parser.add_argument("-l", "--load", action="store_true", help="load the model")
    parser.add_argument(
        "-o", "--output-model", type=bool, help="file where the model is saved"
    )
    parser.add_argument(
        "-i", "--input-model", type=bool, help="file where the model is loaded from"
    )
    parser.add_argument(
        "-k",
        "--k-max",
        type=int,
        default=10,
        help="the maximum context length (k_max)",
    )
    parser.add_argument(
        "-n",
        "--note-count",
        type=int,
        default=200,
        help="the length of the generated MIDI sequence",
    )

    args = parser.parse_args()

    midi_file = Path(args.midi_file_name)
    if not midi_file.exists():
        raise FileNotFoundError(f"{midi_file} not found")

    name = str(midi_file.stem)
    midi_pitches = extract_pitches_from_midi(midi_file)
    g = SequenceGenerator(midi_pitches, k_max=args.k_max, fast=True)

    if args.load:
        model_file = args.output_model or f"./models/model-{name}.npz"
        print(f"Loading model to {model_file}")
        g.load_model(model_file)
    else:
        print("Training model")
        g.train(max_iter=args.k_max)
        model_file = args.input_model or f"./models/model-{name}.npz"
        g.save_model(model_file)

    save_midi(g.sample_seq(args.note_count), f"./generated/{name}.mid")
